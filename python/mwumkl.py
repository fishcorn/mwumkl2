# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mwumkl', [dirname(__file__)])
        except ImportError:
            import _mwumkl
            return _mwumkl
        if fp is not None:
            try:
                _mod = imp.load_module('_mwumkl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mwumkl = swig_import_helper()
    del swig_import_helper
else:
    import _mwumkl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def _train_mwu_mkl(*args):
  return _mwumkl._train_mwu_mkl(*args)
_train_mwu_mkl = _mwumkl._train_mwu_mkl

def _test_mkl(*args):
  return _mwumkl._test_mkl(*args)
_test_mkl = _mwumkl._test_mkl
def train_mwu_mkl(kerns, kern_params, features, 
                  Xtr, ytr,
                  eps = 0.2, C = 1000.0, norm1or2 = 2, 
                  verbose = 0):
    """
    (success, Sigma, alpha, bsvm, posw) = 
    train_mwu_mkl(
      kerns, kern_params, features, 
      Xtr, ytr, 
      eps = 0.2, C = 1000.0, verbose = 0
    )
    """
    (m,) = kerns.shape
    (d,ntr) = Xtr.shape
    return _train_mwu_mkl(m, ntr, ntr, 
                          kerns, kern_params, features, 
                          Xtr, ytr, d, ntr, m, 
                          eps, 1.0, 20.0, C, norm1or2, 
                          verbose)

def test_mkl(Sigma, alpha, 
             kerns, kern_params, feature_sel, 
             Xtr, Xte, ytr, 
             verbose = 0):
    """
    (results) = test_mkl(
                  Sigma, alpha, 
                  kerns, kern_params, feature_sel, 
                  Xtr, Xte, ytr, 
                  verbose = 0)
    """
    (m,) = kerns.shape
    (d, ntr) = Xtr.shape
    (d, nte) = Xte.shape
    return _test_mkl(nte, 
                     Sigma, alpha, 
                     kerns, kern_params, feature_sel, 
                     Xtr, Xte, ytr, 
                     d, ntr, nte, m, 
                     verbose)

# This file is compatible with both classic and new-style classes.


